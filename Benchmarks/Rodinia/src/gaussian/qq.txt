------------- NVBit (NVidia Binary Instrumentation Tool v1.5.3) Loaded --------------
NVBit core environment variables (mostly for nvbit-devs):
            NVDISASM = nvdisasm - override default nvdisasm found in PATH
            NOBANNER = 0 - if set, does not print this banner
---------------------------------------------------------------------------------
WG size of kernel 1 = 128, WG size of kernel 2= 16 X 16
Create matrix internally in parse, size = 16 
Basic block id 0 - num instructions 9
 Instr 0 @ 0x0 (0) - IMAD.MOV.U32 R1, RZ, RZ, c[0x0][0x28] ;
 Instr 1 @ 0x10 (16) - S2R R0, SR_CTAID.X ;
 Instr 2 @ 0x20 (32) - ULDC.64 UR6, c[0x0][0x170] ;
 Instr 3 @ 0x30 (48) - ULOP3.LUT UR4, URZ, UR7, URZ, 0x33, !UPT ;
 Instr 4 @ 0x40 (64) - S2R R3, SR_TID.X ;
 Instr 5 @ 0x50 (80) - UIADD3 UR4, UR4, UR6, URZ ;
 Instr 6 @ 0x60 (96) - IMAD R0, R0, c[0x0][0x0], R3 ;
 Instr 7 @ 0x70 (112) - ISETP.GE.U32.AND P0, PT, R0, UR4, PT ;
 Instr 8 @ 0x80 (128) - @P0 EXIT ;
Basic block id 1 - num instructions 25
 Instr 9 @ 0x90 (144) - IADD3.X R0, R0, c[0x0][0x174], RZ, PT, !PT ;
 Instr 10 @ 0xa0 (160) - ULDC.64 UR4, c[0x0][0x170] ;
 Instr 11 @ 0xb0 (176) - UIMAD UR4, UR5, UR4, URZ ;
 Instr 12 @ 0xc0 (192) - IMAD R0, R0, c[0x0][0x170], RZ ;
 Instr 13 @ 0xd0 (208) - USHF.R.S32.HI UR7, URZ, 0x1f, UR5 ;
 Instr 14 @ 0xe0 (224) - ULDC UR6, c[0x0][0x174] ;
 Instr 15 @ 0xf0 (240) - IADD3 R0, P0, R0, c[0x0][0x174], RZ ;
 Instr 16 @ 0x100 (256) - UIADD3 UR6, UP0, UR4, UR6, URZ ;
 Instr 17 @ 0x110 (272) - ULDC.64 UR8, c[0x0][0x168] ;
 Instr 18 @ 0x120 (288) - ULEA UR5, UP1, UR6, UR8, 0x2 ;
 Instr 19 @ 0x130 (304) - IMAD.X R3, RZ, RZ, UR7, P0 ;
 Instr 20 @ 0x140 (320) - ULEA.HI.X.SX32 UR4, UR4, UR7, 0x1, UP0 ;
 Instr 21 @ 0x150 (336) - IMAD.SHL.U32 R2, R0, 0x4, RZ ;
 Instr 22 @ 0x160 (352) - ULEA.HI.X UR4, UR6, UR9, UR4, 0x2, UP1 ;
 Instr 23 @ 0x170 (368) - SHF.L.U64.HI R0, R0, 0x2, R3 ;
 Instr 24 @ 0x180 (384) - IMAD.U32 R6, RZ, RZ, UR5 ;
 Instr 25 @ 0x190 (400) - IADD3 R8, P0, R2, c[0x0][0x168], RZ ;
 Instr 26 @ 0x1a0 (416) - IMAD.U32 R7, RZ, RZ, UR4 ;
 Instr 27 @ 0x1b0 (432) - IADD3.X R9, R0, c[0x0][0x16c], RZ, P0, !PT ;
 Instr 28 @ 0x1c0 (448) - ULDC.64 UR4, c[0x0][0x118] ;
 Instr 29 @ 0x1d0 (464) - LDG.E R6, [R6.64] ;
 Instr 30 @ 0x1e0 (480) - LDG.E R9, [R8.64] ;
 Instr 31 @ 0x1f0 (496) - BSSY B1, 0x230 ;
 Instr 32 @ 0x200 (512) - MOV R4, 0x220 ;
 Instr 33 @ 0x210 (528) - CALL.REL.NOINC 0x270 ;
Basic block id 2 - num instructions 1
 Instr 34 @ 0x220 (544) - BSYNC B1 ;
Basic block id 3 - num instructions 4
 Instr 35 @ 0x230 (560) - IADD3 R2, P0, R2, c[0x0][0x160], RZ ;
 Instr 36 @ 0x240 (576) - IADD3.X R3, R0, c[0x0][0x164], RZ, P0, !PT ;
 Instr 37 @ 0x250 (592) - STG.E [R2.64], R7 ;
 Instr 38 @ 0x260 (608) - EXIT ;
Basic block id 4 - num instructions 2
 Instr 39 @ 0x270 (624) - FCHK P0, R9, R6 ;
 Instr 40 @ 0x280 (640) - @P0 BRA 0x340 ;
Basic block id 5 - num instructions 11
 Instr 41 @ 0x290 (656) - MUFU.RCP R3, R6 ;
 Instr 42 @ 0x2a0 (672) - FADD.FTZ R8, -R6, -RZ ;
 Instr 43 @ 0x2b0 (688) - FFMA R10, R3, R8, 1 ;
 Instr 44 @ 0x2c0 (704) - FFMA R10, R3, R10, R3 ;
 Instr 45 @ 0x2d0 (720) - FFMA R3, R9, R10, RZ ;
 Instr 46 @ 0x2e0 (736) - FFMA R5, R8, R3, R9 ;
 Instr 47 @ 0x2f0 (752) - FFMA R5, R10, R5, R3 ;
 Instr 48 @ 0x300 (768) - FFMA R8, R8, R5, R9 ;
 Instr 49 @ 0x310 (784) - FFMA R7, R10, R8, R5 ;
 Instr 50 @ 0x320 (800) - IMAD.MOV.U32 R5, RZ, RZ, 0x0 ;
 Instr 51 @ 0x330 (816) - RET.REL.NODEC R4 0x0 ;
Basic block id 6 - num instructions 5
 Instr 52 @ 0x340 (832) - BSSY B0, 0x3a0 ;
 Instr 53 @ 0x350 (848) - IMAD.MOV.U32 R8, RZ, RZ, R6 ;
 Instr 54 @ 0x360 (864) - MOV R6, 0x390 ;
 Instr 55 @ 0x370 (880) - IMAD.MOV.U32 R7, RZ, RZ, R9 ;
 Instr 56 @ 0x380 (896) - CALL.REL.NOINC 0x3d0 ;
Basic block id 7 - num instructions 1
 Instr 57 @ 0x390 (912) - BSYNC B0 ;
Basic block id 8 - num instructions 3
 Instr 58 @ 0x3a0 (928) - IMAD.MOV.U32 R5, RZ, RZ, 0x0 ;
 Instr 59 @ 0x3b0 (944) - IMAD.MOV.U32 R7, RZ, RZ, R3 ;
 Instr 60 @ 0x3c0 (960) - RET.REL.NODEC R4 0x0 ;
Basic block id 9 - num instructions 11
 Instr 61 @ 0x3d0 (976) - SHF.R.U32.HI R5, RZ, 0x17, R8 ;
 Instr 62 @ 0x3e0 (992) - BSSY B2, 0x650 ;
 Instr 63 @ 0x3f0 (1008) - SHF.R.U32.HI R3, RZ, 0x17, R7 ;
 Instr 64 @ 0x400 (1024) - LOP3.LUT R5, R5, 0xff, RZ, 0xc0, !PT ;
 Instr 65 @ 0x410 (1040) - LOP3.LUT R3, R3, 0xff, RZ, 0xc0, !PT ;
 Instr 66 @ 0x420 (1056) - IADD3 R11, R5, -0x1, RZ ;
 Instr 67 @ 0x430 (1072) - IADD3 R10, R3, -0x1, RZ ;
 Instr 68 @ 0x440 (1088) - ISETP.GT.U32.AND P0, PT, R11, 0xfd, PT ;
 Instr 69 @ 0x450 (1104) - ISETP.GT.U32.OR P0, PT, R10, 0xfd, P0 ;
 Instr 70 @ 0x460 (1120) - @!P0 IMAD.MOV.U32 R9, RZ, RZ, RZ ;
 Instr 71 @ 0x470 (1136) - @!P0 BRA 0x640 ;
Basic block id 10 - num instructions 5
 Instr 72 @ 0x480 (1152) - FSETP.GTU.FTZ.AND P0, PT, |R7|, +INF , PT ;
 Instr 73 @ 0x490 (1168) - FSETP.GTU.FTZ.AND P1, PT, |R8|, +INF , PT ;
 Instr 74 @ 0x4a0 (1184) - PLOP3.LUT P0, PT, P0, P1, PT, 0xa8, 0x0 ;
 Instr 75 @ 0x4b0 (1200) - @P0 BREAK B2 ;
 Instr 76 @ 0x4c0 (1216) - @P0 BRA 0xa90 ;
Basic block id 11 - num instructions 3
 Instr 77 @ 0x4d0 (1232) - LOP3.LUT P0, RZ, R8, 0x7fffffff, R7, 0xc8, !PT ;
 Instr 78 @ 0x4e0 (1248) - @!P0 BREAK B2 ;
 Instr 79 @ 0x4f0 (1264) - @!P0 BRA 0xa60 ;
Basic block id 12 - num instructions 5
 Instr 80 @ 0x500 (1280) - FSETP.NEU.FTZ.AND P2, PT, |R7|.reuse, +INF , PT ;
 Instr 81 @ 0x510 (1296) - FSETP.NEU.FTZ.AND P1, PT, |R8|, +INF , PT ;
 Instr 82 @ 0x520 (1312) - FSETP.NEU.FTZ.AND P0, PT, |R7|, +INF , PT ;
 Instr 83 @ 0x530 (1328) - @!P1 BREAK !P2, B2 ;
 Instr 84 @ 0x540 (1344) - @!P1 BRA !P2, 0xa60 ;
Basic block id 13 - num instructions 4
 Instr 85 @ 0x550 (1360) - LOP3.LUT P2, RZ, R7, 0x7fffffff, RZ, 0xc0, !PT ;
 Instr 86 @ 0x560 (1376) - PLOP3.LUT P1, PT, P1, P2, PT, 0x2a, 0x0 ;
 Instr 87 @ 0x570 (1392) - @P1 BREAK B2 ;
 Instr 88 @ 0x580 (1408) - @P1 BRA 0xa30 ;
Basic block id 14 - num instructions 4
 Instr 89 @ 0x590 (1424) - LOP3.LUT P1, RZ, R8, 0x7fffffff, RZ, 0xc0, !PT ;
 Instr 90 @ 0x5a0 (1440) - PLOP3.LUT P0, PT, P0, P1, PT, 0x2a, 0x0 ;
 Instr 91 @ 0x5b0 (1456) - @P0 BREAK B2 ;
 Instr 92 @ 0x5c0 (1472) - @P0 BRA 0x9f0 ;
Basic block id 15 - num instructions 7
 Instr 93 @ 0x5d0 (1488) - ISETP.GE.AND P0, PT, R10, RZ, PT ;
 Instr 94 @ 0x5e0 (1504) - ISETP.GE.AND P1, PT, R11, RZ, PT ;
 Instr 95 @ 0x5f0 (1520) - @P0 IMAD.MOV.U32 R9, RZ, RZ, RZ ;
 Instr 96 @ 0x600 (1536) - @!P0 IMAD.MOV.U32 R9, RZ, RZ, -0x40 ;
 Instr 97 @ 0x610 (1552) - @!P0 FFMA R7, R7, 1.84467440737095516160e+19, RZ ;
 Instr 98 @ 0x620 (1568) - @!P1 FFMA R8, R8, 1.84467440737095516160e+19, RZ ;
 Instr 99 @ 0x630 (1584) - @!P1 IADD3 R9, R9, 0x40, RZ ;
Basic block id 16 - num instructions 1
 Instr 100 @ 0x640 (1600) - BSYNC B2 ;
Basic block id 17 - num instructions 22
 Instr 101 @ 0x650 (1616) - LEA R11, R5, 0xc0800000, 0x17 ;
 Instr 102 @ 0x660 (1632) - BSSY B2, 0x9d0 ;
 Instr 103 @ 0x670 (1648) - IMAD.IADD R11, R8, 0x1, -R11 ;
 Instr 104 @ 0x680 (1664) - IADD3 R8, R3, -0x7f, RZ ;
 Instr 105 @ 0x690 (1680) - MUFU.RCP R10, R11 ;
 Instr 106 @ 0x6a0 (1696) - FADD.FTZ R12, -R11, -RZ ;
 Instr 107 @ 0x6b0 (1712) - IMAD R7, R8.reuse, -0x800000, R7 ;
 Instr 108 @ 0x6c0 (1728) - IADD3 R8, R8, 0x7f, -R5 ;
 Instr 109 @ 0x6d0 (1744) - IMAD.IADD R8, R8, 0x1, R9 ;
 Instr 110 @ 0x6e0 (1760) - FFMA R3, R10, R12, 1 ;
 Instr 111 @ 0x6f0 (1776) - FFMA R14, R10, R3, R10 ;
 Instr 112 @ 0x700 (1792) - FFMA R3, R7, R14, RZ ;
 Instr 113 @ 0x710 (1808) - FFMA R10, R12, R3, R7 ;
 Instr 114 @ 0x720 (1824) - FFMA R13, R14, R10, R3 ;
 Instr 115 @ 0x730 (1840) - FFMA R12, R12, R13, R7 ;
 Instr 116 @ 0x740 (1856) - FFMA R3, R14, R12, R13 ;
 Instr 117 @ 0x750 (1872) - SHF.R.U32.HI R5, RZ, 0x17, R3 ;
 Instr 118 @ 0x760 (1888) - LOP3.LUT R5, R5, 0xff, RZ, 0xc0, !PT ;
 Instr 119 @ 0x770 (1904) - IMAD.IADD R9, R5, 0x1, R8 ;
 Instr 120 @ 0x780 (1920) - IADD3 R5, R9, -0x1, RZ ;
 Instr 121 @ 0x790 (1936) - ISETP.GE.U32.AND P0, PT, R5, 0xfe, PT ;
 Instr 122 @ 0x7a0 (1952) - @!P0 BRA 0x9b0 ;
Basic block id 18 - num instructions 2
 Instr 123 @ 0x7b0 (1968) - ISETP.GT.AND P0, PT, R9, 0xfe, PT ;
 Instr 124 @ 0x7c0 (1984) - @P0 BRA 0x980 ;
Basic block id 19 - num instructions 2
 Instr 125 @ 0x7d0 (2000) - ISETP.GE.AND P0, PT, R9, 0x1, PT ;
 Instr 126 @ 0x7e0 (2016) - @P0 BRA 0x9c0 ;
Basic block id 20 - num instructions 3
 Instr 127 @ 0x7f0 (2032) - ISETP.GE.AND P0, PT, R9, -0x18, PT ;
 Instr 128 @ 0x800 (2048) - LOP3.LUT R3, R3, 0x80000000, RZ, 0xc0, !PT ;
 Instr 129 @ 0x810 (2064) - @!P0 BRA 0x9c0 ;
Basic block id 21 - num instructions 22
 Instr 130 @ 0x820 (2080) - FFMA.RZ R5, R14.reuse, R12.reuse, R13.reuse ;
 Instr 131 @ 0x830 (2096) - IADD3 R10, R9.reuse, 0x20, RZ ;
 Instr 132 @ 0x840 (2112) - FFMA.RM R8, R14.reuse, R12.reuse, R13.reuse ;
 Instr 133 @ 0x850 (2128) - ISETP.NE.AND P2, PT, R9, RZ, PT ;
 Instr 134 @ 0x860 (2144) - LOP3.LUT R7, R5, 0x7fffff, RZ, 0xc0, !PT ;
 Instr 135 @ 0x870 (2160) - FFMA.RP R5, R14, R12, R13 ;
 Instr 136 @ 0x880 (2176) - ISETP.NE.AND P1, PT, R9, RZ, PT ;
 Instr 137 @ 0x890 (2192) - IMAD.MOV R9, RZ, RZ, -R9 ;
 Instr 138 @ 0x8a0 (2208) - LOP3.LUT R7, R7, 0x800000, RZ, 0xfc, !PT ;
 Instr 139 @ 0x8b0 (2224) - FSETP.NEU.FTZ.AND P0, PT, R5, R8, PT ;
 Instr 140 @ 0x8c0 (2240) - SHF.L.U32 R10, R7, R10, RZ ;
 Instr 141 @ 0x8d0 (2256) - SEL R8, R9, RZ, P2 ;
 Instr 142 @ 0x8e0 (2272) - ISETP.NE.AND P1, PT, R10, RZ, P1 ;
 Instr 143 @ 0x8f0 (2288) - SHF.R.U32.HI R8, RZ, R8, R7 ;
 Instr 144 @ 0x900 (2304) - PLOP3.LUT P0, PT, P0, P1, PT, 0xa8, 0x0 ;
 Instr 145 @ 0x910 (2320) - SHF.R.U32.HI R10, RZ, 0x1, R8 ;
 Instr 146 @ 0x920 (2336) - SEL R5, RZ, 0x1, !P0 ;
 Instr 147 @ 0x930 (2352) - LOP3.LUT R5, R5, 0x1, R10, 0xf8, !PT ;
 Instr 148 @ 0x940 (2368) - LOP3.LUT R5, R5, R8, RZ, 0xc0, !PT ;
 Instr 149 @ 0x950 (2384) - IMAD.IADD R10, R10, 0x1, R5 ;
 Instr 150 @ 0x960 (2400) - LOP3.LUT R3, R10, R3, RZ, 0xfc, !PT ;
 Instr 151 @ 0x970 (2416) - BRA 0x9c0 ;
Basic block id 22 - num instructions 3
 Instr 152 @ 0x980 (2432) - LOP3.LUT R3, R3, 0x80000000, RZ, 0xc0, !PT ;
 Instr 153 @ 0x990 (2448) - LOP3.LUT R3, R3, 0x7f800000, RZ, 0xfc, !PT ;
 Instr 154 @ 0x9a0 (2464) - BRA 0x9c0 ;
Basic block id 23 - num instructions 1
 Instr 155 @ 0x9b0 (2480) - IMAD R3, R8, 0x800000, R3 ;
Basic block id 24 - num instructions 1
 Instr 156 @ 0x9c0 (2496) - BSYNC B2 ;
Basic block id 25 - num instructions 2
 Instr 157 @ 0x9d0 (2512) - IMAD.MOV.U32 R7, RZ, RZ, 0x0 ;
 Instr 158 @ 0x9e0 (2528) - RET.REL.NODEC R6 0x0 ;
Basic block id 26 - num instructions 4
 Instr 159 @ 0x9f0 (2544) - LOP3.LUT R7, R8, 0x80000000, R7, 0x48, !PT ;
 Instr 160 @ 0xa00 (2560) - LOP3.LUT R3, R7, 0x7f800000, RZ, 0xfc, !PT ;
 Instr 161 @ 0xa10 (2576) - IMAD.MOV.U32 R7, RZ, RZ, 0x0 ;
 Instr 162 @ 0xa20 (2592) - RET.REL.NODEC R6 0x0 ;
Basic block id 27 - num instructions 3
 Instr 163 @ 0xa30 (2608) - LOP3.LUT R3, R8, 0x80000000, R7, 0x48, !PT ;
 Instr 164 @ 0xa40 (2624) - IMAD.MOV.U32 R7, RZ, RZ, 0x0 ;
 Instr 165 @ 0xa50 (2640) - RET.REL.NODEC R6 0x0 ;
Basic block id 28 - num instructions 3
 Instr 166 @ 0xa60 (2656) - IMAD.MOV.U32 R7, RZ, RZ, 0x0 ;
 Instr 167 @ 0xa70 (2672) - IMAD.MOV.U32 R3, RZ, RZ, 0x7fffffff ;
 Instr 168 @ 0xa80 (2688) - RET.REL.NODEC R6 0x0 ;
Basic block id 29 - num instructions 3
 Instr 169 @ 0xa90 (2704) - FADD.FTZ R3, R7, R8 ;
 Instr 170 @ 0xaa0 (2720) - IMAD.MOV.U32 R7, RZ, RZ, 0x0 ;
 Instr 171 @ 0xab0 (2736) - RET.REL.NODEC R6 0x0 ;
Basic block id 30 - num instructions 1
 Instr 172 @ 0xac0 (2752) - BRA 0xac0;
Basic block id 31 - num instructions 10
 Instr 0 @ 0x0 (0) - MOV R1, c[0x0][0x28] ;
 Instr 1 @ 0x10 (16) - S2R R0, SR_CTAID.X ;
 Instr 2 @ 0x20 (32) - ULDC UR4, c[0x0][0x180] ;
 Instr 3 @ 0x30 (48) - ULOP3.LUT UR4, URZ, UR4, URZ, 0x33, !UPT ;
 Instr 4 @ 0x40 (64) - S2R R3, SR_TID.X ;
 Instr 5 @ 0x50 (80) - ULDC UR5, c[0x0][0x178] ;
 Instr 6 @ 0x60 (96) - UIADD3 UR4, UR4, UR5, URZ ;
 Instr 7 @ 0x70 (112) - IMAD R0, R0, c[0x0][0x0], R3 ;
 Instr 8 @ 0x80 (128) - ISETP.GE.U32.AND P0, PT, R0, UR4, PT ;
 Instr 9 @ 0x90 (144) - @P0 EXIT ;
Basic block id 32 - num instructions 7
 Instr 10 @ 0xa0 (160) - S2R R8, SR_TID.Y ;
 Instr 11 @ 0xb0 (176) - MOV R6, c[0x0][0x178] ;
 Instr 12 @ 0xc0 (192) - S2R R3, SR_CTAID.Y ;
 Instr 13 @ 0xd0 (208) - IMAD R8, R3, c[0x0][0x4], R8 ;
 Instr 14 @ 0xe0 (224) - IADD3 R3, R6, -c[0x0][0x180], RZ ;
 Instr 15 @ 0xf0 (240) - ISETP.GE.U32.AND P0, PT, R8, R3, PT ;
 Instr 16 @ 0x100 (256) - @P0 EXIT ;
Basic block id 33 - num instructions 18
 Instr 17 @ 0x110 (272) - IADD3 R0, R0, c[0x0][0x180], RZ ;
 Instr 18 @ 0x120 (288) - HFMA2.MMA R12, -RZ, RZ, 0, 2.384185791015625e-07 ;
 Instr 19 @ 0x130 (304) - IADD3 R5, R8, c[0x0][0x180], RZ ;
 Instr 20 @ 0x140 (320) - ULDC.64 UR4, c[0x0][0x118] ;
 Instr 21 @ 0x150 (336) - IADD3 R2, R0, 0x1, RZ ;
 Instr 22 @ 0x160 (352) - IMAD R4, R6, c[0x0][0x180], R5.reuse ;
 Instr 23 @ 0x170 (368) - IMAD R3, R2.reuse, R6, c[0x0][0x180] ;
 Instr 24 @ 0x180 (384) - IMAD R9, R2, c[0x0][0x178], R5 ;
 Instr 25 @ 0x190 (400) - IMAD.WIDE R4, R4, R12, c[0x0][0x168] ;
 Instr 26 @ 0x1a0 (416) - IMAD.WIDE R2, R3, R12.reuse, c[0x0][0x160] ;
 Instr 27 @ 0x1b0 (432) - LDG.E R4, [R4.64] ;
 Instr 28 @ 0x1c0 (448) - IMAD.WIDE R6, R9, R12, c[0x0][0x168] ;
 Instr 29 @ 0x1d0 (464) - LDG.E R3, [R2.64] ;
 Instr 30 @ 0x1e0 (480) - LDG.E R10, [R6.64] ;
 Instr 31 @ 0x1f0 (496) - ISETP.NE.AND P0, PT, R8, RZ, PT ;
 Instr 32 @ 0x200 (512) - FFMA R11, R4, -R3, R10 ;
 Instr 33 @ 0x210 (528) - STG.E [R6.64], R11 ;
 Instr 34 @ 0x220 (544) - @P0 EXIT ;
Basic block id 34 - num instructions 10
 Instr 35 @ 0x230 (560) - MOV R5, c[0x0][0x180] ;
 Instr 36 @ 0x240 (576) - IMAD.WIDE R2, R9, R12, c[0x0][0x160] ;
 Instr 37 @ 0x250 (592) - IMAD.WIDE R4, R12, R5, c[0x0][0x170] ;
 Instr 38 @ 0x260 (608) - LDG.E R3, [R2.64] ;
 Instr 39 @ 0x270 (624) - IMAD.WIDE R6, R0, R12, c[0x0][0x170] ;
 Instr 40 @ 0x280 (640) - LDG.E R4, [R4.64] ;
 Instr 41 @ 0x290 (656) - LDG.E R0, [R6.64+0x4] ;
 Instr 42 @ 0x2a0 (672) - FFMA R9, R4, -R3, R0 ;
 Instr 43 @ 0x2b0 (688) - STG.E [R6.64+0x4], R9 ;
 Instr 44 @ 0x2c0 (704) - EXIT ;
Basic block id 35 - num instructions 1
 Instr 45 @ 0x2d0 (720) - BRA 0x2d0;

Time total (including memory transfers)	0.688518 sec
Time for CUDA kernels:	0.473106 sec


 the count is 35 /n/n